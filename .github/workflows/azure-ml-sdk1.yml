name: MLOps Azure Data Preparing and AI Training (SDK 1)

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  workflow_call:
    inputs:
      data_prep:
        description: 'Data preparing'
        type: boolean
        default: true
        required: true
      ai_training:
        description: 'AI Training'
        type: boolean
        required: true
        default: true
      api_creation:
        description: 'API Creation'
        type: boolean
        default: true
        required: true
      api_deployment:
          description: 'API Deployment'
          type: boolean
          default: true
          required: true
      
  workflow_dispatch:
    branches: [ master ]
    inputs:
      data_prep:
        description: 'Data preparing'
        type: boolean
        default: true
        required: true
      ai_training:
        description: 'AI Training'
        type: boolean
        required: true
        default: true
      api_creation:
        description: 'API Creation'
        type: boolean
        default: true
        required: true
      api_deployment:
          description: 'API Deployment'
          type: boolean
          default: true
          required: true
    
env:
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

  CLIENT_ID: c158d57a-cac4-4e81-881b-200a600ba756
  TENANT_ID: 4ded4bb1-6bff-42b3-aed7-6a36a503bf7a
  WORKSPACE_NAME: diabetes-prediction
  RESOURCE_GROUP: mlops-bart
  SUBSCRIPTION_ID: 412afafd-c7eb-488d-b2fc-cc920cc0087a

  MODEL_NAME: diabetes-prediction-model
  MODEL_VERSION: v12
  MODEL_C_VALUE: 0.5
  MODEL_MAX_ITER: 1000

  RAW_DATASET_NAME: patients_healthdata
  CHECKED_DATASET_NAME: patients_healthdata_checked
  TRAIN_DATASET_NAME: patients_healthdata_train
  TEST_DATASET_NAME: patients_healthdata_test
  DATASET_VERSION: 1
 
  WORKDIR: ${{github.workspace}}
  GIT_SHA: ${{ github.sha }} # Set the SHA to use in the code
  
jobs:

  data-preparing:
    if: ${{ inputs.data_prep }}
  
    runs-on: ubuntu-20.04 # Because of issues with dotnet, we downgraded this one
   
    env:
      RANDOM_SEED: 42
      TRAIN_TEST_SPLIT_FACTOR: 0.20
  
    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'
      
      - name: 'install requirements'
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKDIR }}

      - name: 'Run data prep script'
        id: dataprep
        working-directory: ${{ env.WORKDIR }}
        run: |
          python steps/01_DataPreparing.py

  ai-training:
    needs: [data-preparing]
    # This will run Always BUT only when the previous job was successful or skipped && the ai_Training flag is set to true.
    if: ${{
        always() &&
        (needs.data-preparing.result == 'success' || needs.data-preparing.result == 'skipped') &&
        inputs.ai_training
      }}
    runs-on: ubuntu-20.04
    # runs-on: self-hosted

    env:
      EXPERIMENT_NAME: diabetes-prediction-experiment
      SCRIPT_FOLDER: scripts

      ## Compute cluster parts
      AML_COMPUTE_CLUSTER_NAME: cpu-cluster
      AML_COMPUTE_CLUSTER_MIN_NODES: 0
      AML_COMPUTE_CLISTER_MAX_NODES: 4
      AML_COMPUTE_CLUSTER_SKU: STANDARD_D2_V2

      ## Training environment
      CONDA_DEPENDENCIES_PATH: conda_dependencies.yml
      TRAINING_ENV_NAME: diabetes-prediction-env-training

      TRAIN_DATASHEET_NAME: patients_healthdata_1_train.csv
      TEST_DATASHEET_NAME: patients_healthdata_1_test.csv

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'

      - name: 'install requirements'
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKDIR }}


      - name: 'Run training script on GitHub Runner'
        id: aitraining
        working-directory: ${{ env.WORKDIR }}
        run: |
          python steps/02_AITraining.py

  api-creation:
    needs: [data-preparing, ai-training]
    # This will run Always BUT only when the previous two jobs were successful or skipped && the api_creation flag is set to true.
    if: ${{
        always() &&
        (needs.data-preparing.result == 'success' || needs.data-preparing.result == 'skipped') &&
        (needs.ai-training.result == 'success' || needs.ai-training.result == 'skipped') &&
        inputs.api_creation
      }}
    runs-on: ubuntu-latest
   
    env:
      LOCAL_MODEL_PATH: api/app/outputs
      
    steps:
      - uses: actions/checkout@v2
      
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'

      - name: 'install requirements'
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKDIR }}

      - name: 'Run deployment script'
        id: deployment
        working-directory: ${{ env.WORKDIR }}
        run: |
          python steps/03_Deployment.py

      - name: Upload API Code for Docker
        uses: actions/upload-artifact@v2
        with:
          name: docker-config
          path: ${{ env.WORKDIR }}/api

  docker-build-and-push:
    needs: [api-creation]

    if: ${{
        always() &&
        (needs.data-preparing.result == 'success' || needs.data-preparing.result == 'skipped') &&
        (needs.ai-training.result == 'success' || needs.ai-training.result == 'skipped') &&
        inputs.api_creation
      }}
    runs-on: ubuntu-latest
   
    steps:
      - name: Download docker-config artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-config

      - name: Gather Docker Meta Information
        id: meta
        uses: docker/metadata-action@v3
        with: 
          # list of Docker images to use as base name for tags
          images: |
            docker.io/bartdewa/diabetes-prediction
          # generate Docker tags based on the following events/attributes:
          # The GitHub Branch
          # The GitHub SHA
          # More info: https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
          tags: |
            type=ref,event=branch
            type=sha
      
      # Enter your GITHUB Token here!
      - name: Login to DOCKERHUB
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
        
  docker-pull-and-deploy:
    needs: [docker-build-and-push]
  
    if: ${{
        always() &&
        (needs.docker-build-and-push.result == 'success' || needs.docker-build-and-push == 'skipped')
      }}
    runs-on: self-hosted

    env:
      API_VERSION: 1.0.0
      NAME_SPACE: diabetes-prediction
      NODE_PORT: 30080
      REPLICA_COUNT: 2

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create namespace
        continue-on-error: true  
        run: kubectl create namespace ${{ env.NAME_SPACE }}

      - name: Get short SHA
        run: echo "SHORT_SHA=sha-$("${{ github.sha }}".SubString(0, 7))" >> $env:GITHUB_ENV

      - name: Print short SHA
        run: echo "Short SHA is ${{ env.SHORT_SHA }}"
                       
      - name: Start deployment
        run: helm upgrade --install diabetes-prediction ./helm
                          --set image.tag=${{ env.SHORT_SHA }}
                          --set app.name=${{ env.NAME_SPACE }}-v${{ env.API_VERSION }}
                          --set app.version=${{ env.API_VERSION }}
                          --set app.modelVersion=${{ env.MODEL_VERSION }}
                          --set nodePort=${{ env.NODE_PORT }}
                          --set replicaCount=${{ env.REPLICA_COUNT }}
                          --set git-sha=${{ github.sha }} -n ${{ env.NAME_SPACE }}
        working-directory: ${{ env.WORKDIR }}



