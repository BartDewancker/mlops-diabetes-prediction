name: MLOps Azure Data Preparing and AI Training (SDK 2)

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      create_compute:
        description: 'Create compute'
        type: boolean
        default: true
        required: true
      create_env:
        description: 'Create environment'
        type: boolean
        default: true
        required: true
      create_data_check:
        description: 'Create component for data check'
        type: boolean
        default: true
        required: true
      create_data_split:
        description: 'Create component for data split'
        type: boolean
        default: true
        required: true
      create_train:
          description: 'Create component for model training'
          type: boolean
          default: true
          required: true
      create_job:
        description: 'Create job for model training'
        type: boolean
        default: true
        required: true
      api_creation:
        description: 'API Creation'
        type: boolean
        default: true
        required: true
        
env:
  WORKDIR: ${{ github.workspace }}
  GIT_SHA: ${{ github.sha }} # Set the SHA to use in the code

  AZ_CLI_PATH: ${{ github.workspace }}/azureml-2.0-cli
  AZ_WORKSPACE: diabetes-prediction-v2
  AZ_COMPUTE: cpu-one

  ENV_VERSION: 1.0.0
  DATA_CHECK_VERSION: 1.0.3
  DATA_SPLIT_VERSION: 1.0.3
  TRAIN_VERSION: 2.0.9
  PIPE_VERSION: 1.0.0
  API_VERSION: 1.0.0
 
jobs:

  az-pipeline:
    runs-on: ubuntu-20.04

    env:
      RANDOM_SEED: 40
      TRAIN_TEST_SPLIT_FACTOR: 0.20
      TRAIN_DATASHEET_NAME: patients_healthdata_1_train.csv
      TEST_DATASHEET_NAME: patients_healthdata_1_test.csv
      MODEL_NAME: diabetes-prediction-model
      MODEL_VERSION: v10

    steps:
      - uses: actions/checkout@v2

      - name: add extension by name
        run: az extension add --name ml

      - name: azure login  
        run: |
             az login --service-principal -u ${{ secrets.CLIENT_ID }} -p ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.TENANT_ID }}
             az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
       
      - name: set default workspace
        run: az configure --defaults group=mlops-bart workspace=${{ env.AZ_WORKSPACE }}
        
      - name: create compute
        if: inputs.create_compute
        run: az ml compute create --file ${{ env.AZ_CLI_PATH }}/config/compute.yml
                                  --set name=${{ env.AZ_COMPUTE }}
    
      - name: create environment
        if: inputs.create_env
        run: az ml environment create --file ${{ env.AZ_CLI_PATH }}/config/diabetes-prediction-env.yml
                                      --version ${{ env.ENV_VERSION }}
                                      --set tags.git-sha=${{ env.GIT_SHA }}

      - name: create component for data check
        if: inputs.create_data_check
        run: az ml component create --file ${{ env.AZ_CLI_PATH }}/components/dataprep/datacheck.yml
                                    --version ${{ env.DATA_CHECK_VERSION }}
                                    --set tags.git-sha=${{ env.GIT_SHA }}
                            
      - name: create component for data split
        if: inputs.create_data_split
        run: az ml component create --file ${{ env.AZ_CLI_PATH }}/components/dataprep/datasplit.yml
                                    --version ${{ env.DATA_SPLIT_VERSION }}
                                    --set tags.git-sha=${{ env.GIT_SHA }}
                                  
      - name: create component for model training
        if: inputs.create_train
        run: az ml component create --file ${{ env.AZ_CLI_PATH }}/components/training/training.yml
                                    --version ${{ env.TRAIN_VERSION }}
                                    --set tags.git-sha=${{ env.GIT_SHA }}

      - name: create job
        if: inputs.create_job
        run: az ml job create --file ${{ env.AZ_CLI_PATH }}/pipelines/prediction-pipeline.yml
                              --set inputs.random_seed=${{ env.RANDOM_SEED }}
                              --set inputs.train_test_split_factor=${{ env.TRAIN_TEST_SPLIT_FACTOR }}
                              --set inputs.model_name=${{ env.MODEL_NAME }}
                              --set inputs.train_datasheet_name=${{ env.TRAIN_DATASHEET_NAME }}
                              --set inputs.test_datasheet_name=${{ env.TEST_DATASHEET_NAME }}
                              --set jobs.data_check.component=azureml:data_check:${{ env.DATA_CHECK_VERSION }}
                              --set jobs.data_split.component=azureml:data_split:${{ env.DATA_SPLIT_VERSION }}
                              --set jobs.training.component=azureml:training:${{ env.TRAIN_VERSION }}


  api-creation:
    needs: [az-pipeline]
    if: ${{
        always() &&
        (needs.az-pipeline.result == 'success' || needs.az-pipeline.result == 'skipped') &&
        inputs.api_creation
      }}
    runs-on: ubuntu-latest
    
    env:
      LOCAL_MODEL_PATH: api/app/outputs
      
    steps:
      - uses: actions/checkout@v2
      
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pip'

      - name: 'install requirements'
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKDIR }}

      - name: Upload API Code for Docker
        uses: actions/upload-artifact@v2
        with:
          name: docker-config
          path: ${{ env.WORKDIR }}/api

  docker-build-and-push:
    needs: [api-creation]

    if: ${{
        always() &&
        (needs.api-creation.result == 'success' || needs.api-creation.result == 'skipped') &&
        inputs.api_creation
      }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Download docker-config artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-config

      - name: Gather Docker Meta Information
        id: meta
        uses: docker/metadata-action@v3
        with: 
          # list of Docker images to use as base name for tags
          images: |
            docker.io/bartdewa/diabetes-prediction
          # generate Docker tags based on the following events/attributes:
          # The GitHub Branch
          # The GitHub SHA
          # More info: https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
          tags: |
            type=ref,event=branch
            type=sha
      
      # Enter your GITHUB Token here!
      - name: Login to DOCKERHUB
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
        
  docker-pull-and-deploy:
    needs: [docker-build-and-push]
  
    if: ${{
        always() &&
        (needs.docker-build-and-push.result == 'success' || needs.docker-build-and-push == 'skipped')
      }}
    runs-on: self-hosted

    env:
      NAME_SPACE: diabetes-prediction

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create namespace
        continue-on-error: true  
        run: kubectl create namespace ${{ env.NAME_SPACE }}

      - name: Get short SHA
        run: echo "SHORT_SHA=sha-$("${{ github.sha }}".SubString(0, 7))" >> $env:GITHUB_ENV

      - name: Print short SHA
        run: echo "Short SHA is ${{ env.SHORT_SHA }}"
                        
      - name: Start deployment
        run: helm upgrade --install diabetes-prediction ./helm
                          --set image.tag=${{ env.SHORT_SHA }}
                          --set app.name=${{ env.NAME_SPACE }}-v${{ env.API_VERSION }}
                          --set app.version=${{ env.API_VERSION }}
                          --set app.modelVersion=${{ env.MODEL_VERSION }} -n ${{ env.NAME_SPACE }}
                          --set git-sha=${{ github.sha }}
        working-directory: ${{ env.WORKDIR }}

                              

